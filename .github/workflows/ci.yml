name: Multi-Module E-Commerce CI/CD

on:
  push:
    branches: [ main, develop, 'feature/**', 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true'

jobs:
  # Code Quality & Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle with enhanced caching
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: false
          cache-read-only: false
          cache-write-only: false
          gradle-home-cache-cleanup: true
          add-job-summary: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run compilation check with optimizations
        run: ./gradlew compileJava compileTestJava --parallel --build-cache

  # Unit & Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        module: [
          'common:common-core',
          'common:common-web', 
          'common:common-security',
          'common:common-cache',
          'domain:user-domain',
          'domain:product-domain', 
          'domain:order-domain',
          'infrastructure:data-access',
          'infrastructure:cache-infrastructure',
          'application:user-api',
          'application:batch-app'
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle with enhanced caching
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: false
          cache-read-only: false
          cache-write-only: false
          gradle-home-cache-cleanup: true
          add-job-summary: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check if tests exist
        id: check-tests
        run: |
          module_path=$(echo "${{ matrix.module }}" | sed 's/:/\//g')
          if [ -d "$module_path/src/test" ] && [ "$(find $module_path/src/test -name '*.java' | wc -l)" -gt 0 ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests found in ${{ matrix.module }}"
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No tests found in ${{ matrix.module }}, skipping test execution"
          fi

      - name: Run tests for ${{ matrix.module }}
        if: steps.check-tests.outputs.tests_exist == 'true'
        run: |
          echo "üß™ Running tests for ${{ matrix.module }}..."
          ./gradlew :${{ matrix.module }}:test --parallel --build-cache

      - name: Generate test report
        uses: dorny/test-reporter@v2
        if: always() && steps.check-tests.outputs.tests_exist == 'true'
        with:
          name: Test Results (${{ matrix.module }})
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && steps.check-tests.outputs.tests_exist == 'true'
        with:
          name: test-results-${{ matrix.module }}
          path: |
            **/build/test-results/test/
            **/build/reports/tests/test/
          retention-days: 7

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle with enhanced caching
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: false
          cache-read-only: false
          cache-write-only: false
          gradle-home-cache-cleanup: true
          add-job-summary: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (optimized)
        run: |
          echo "üöÄ Starting optimized build..."
          ./gradlew build -x test --parallel --build-cache

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: |
            application/user-api/build/libs/*.jar
            application/batch-app/build/libs/*.jar
          retention-days: 7

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: ecommerce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle with enhanced caching
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: false
          cache-read-only: false
          cache-write-only: false
          gradle-home-cache-cleanup: true
          add-job-summary: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run integration tests (optimized)
        run: |
          echo "üîó Running integration tests..."
          if ./gradlew tasks --all | grep -q "integrationTest"; then
            ./gradlew integrationTest --parallel --build-cache
          else
            echo "Integration tests not configured, running focused tests..."
            ./gradlew test --parallel --build-cache
          fi
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ecommerce_test
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379

  # Security Check (lightweight for personal repos)
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run dependency vulnerability check
        run: |
          echo "üîç Checking for known vulnerabilities in dependencies..."
          # GradleÏùò ÏùòÏ°¥ÏÑ± Ìä∏Î¶¨Î•º ÌôïÏù∏ÌïòÏó¨ ÏïåÎ†§ÏßÑ Ï∑®ÏïΩÏ†êÏù¥ ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
          ./gradlew dependencies --configuration runtimeClasspath | grep -i "FAIL\|ERROR\|WARN" || echo "‚úÖ No obvious dependency issues found"
          
      - name: Check for hardcoded secrets (basic)
        run: |
          echo "üîç Basic secret pattern check..."
          # Í∏∞Î≥∏Ï†ÅÏù∏ ÏãúÌÅ¨Î¶ø Ìå®ÌÑ¥ Ï≤¥ÌÅ¨ (ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌååÏùº Ï†úÏô∏)
          if git log --oneline -10 | xargs -I {} git show {} --name-only | grep -v ".github" | xargs grep -l -i -E "(password|secret|key|token).*=" 2>/dev/null || false; then
            echo "‚ö†Ô∏è Potential hardcoded secrets detected. Please review manually."
          else
            echo "‚úÖ No obvious hardcoded secrets found"
          fi

  # Deploy to Staging (develop branch only)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: jar-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # docker build -t ecommerce:staging .
          # docker push registry/ecommerce:staging

  # Deploy to Production (main branch only, with manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-test, security-check]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: jar-artifacts

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.jar"
          generateReleaseNotes: true

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # docker build -t ecommerce:latest .
          # docker push registry/ecommerce:latest

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ **Status**: Deployment successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status**: Deployment failed!" >> $GITHUB_STEP_SUMMARY
          fi