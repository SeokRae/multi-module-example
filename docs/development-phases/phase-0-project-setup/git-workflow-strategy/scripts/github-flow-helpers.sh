#!/bin/bash

# GitHub Flow 헬퍼 함수들
# 사용법: source scripts/github-flow-helpers.sh

# 색상 코드
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# 유틸리티 함수들
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# GitHub Flow 워크플로우 함수들

# 새로운 기능 시작
gf_start() {
    local feature_name=$1
    
    if [ -z "$feature_name" ]; then
        print_error "기능명을 입력하세요."
        echo "사용법: gf_start <feature-name>"
        echo "예시: gf_start user-authentication"
        return 1
    fi
    
    print_info "🚀 GitHub Flow 기능 개발 시작: $feature_name"
    
    # main 브랜치에서 최신 상태로 시작
    git checkout main || return 1
    git pull origin main || return 1
    git checkout -b "feature/$feature_name" || return 1
    
    print_success "브랜치 'feature/$feature_name' 생성 완료"
    print_info "📝 개발 완료 후 다음 명령어로 PR을 생성하세요:"
    echo "   gf_pr 'Add $feature_name' 'Description of changes'"
}

# 버그 수정 시작
gf_bugfix() {
    local bug_name=$1
    
    if [ -z "$bug_name" ]; then
        print_error "버그 수정명을 입력하세요."
        echo "사용법: gf_bugfix <bug-name>"
        echo "예시: gf_bugfix login-issue"
        return 1
    fi
    
    print_info "🐛 버그 수정 시작: $bug_name"
    
    git checkout main || return 1
    git pull origin main || return 1
    git checkout -b "bugfix/$bug_name" || return 1
    
    print_success "브랜치 'bugfix/$bug_name' 생성 완료"
}

# 문서 업데이트 시작
gf_docs() {
    local docs_name=$1
    
    if [ -z "$docs_name" ]; then
        print_error "문서 업데이트명을 입력하세요."
        echo "사용법: gf_docs <docs-name>"
        echo "예시: gf_docs update-readme"
        return 1
    fi
    
    print_info "📚 문서 업데이트 시작: $docs_name"
    
    git checkout main || return 1
    git pull origin main || return 1
    git checkout -b "docs/$docs_name" || return 1
    
    print_success "브랜치 'docs/$docs_name' 생성 완료"
}

# Pull Request 생성
gf_pr() {
    local title=$1
    local body=$2
    
    if [ -z "$title" ]; then
        print_error "PR 제목을 입력하세요."
        echo "사용법: gf_pr <title> [body]"
        echo "예시: gf_pr 'Add user authentication' 'Implements login and logout functionality'"
        return 1
    fi
    
    if [ -z "$body" ]; then
        body="Generated by GitHub Flow helper script"
    fi
    
    print_info "📝 Pull Request 생성 중..."
    
    # 현재 브랜치 푸시
    current_branch=$(git branch --show-current)
    git push -u origin "$current_branch" || return 1
    
    # GitHub CLI를 사용하여 PR 생성
    if command -v gh &> /dev/null; then
        gh pr create --title "$title" --body "$body" || return 1
        print_success "Pull Request가 생성되었습니다."
    else
        print_warning "GitHub CLI(gh)가 설치되어 있지 않습니다."
        print_info "웹 브라우저에서 GitHub에 접속하여 수동으로 PR을 생성하세요."
        print_info "브랜치 '$current_branch'가 원격 저장소에 푸시되었습니다."
    fi
}

# 브랜치 상태 확인
gf_status() {
    print_info "📊 GitHub Flow 상태 확인"
    echo ""
    
    # 현재 브랜치
    current_branch=$(git branch --show-current)
    echo "현재 브랜치: $current_branch"
    echo ""
    
    # main과의 차이
    if [ "$current_branch" != "main" ]; then
        echo "main 브랜치와의 차이:"
        ahead=$(git rev-list --count main.."$current_branch" 2>/dev/null || echo "0")
        behind=$(git rev-list --count "$current_branch"..main 2>/dev/null || echo "0")
        echo "  앞선 커밋: $ahead"
        echo "  뒤처진 커밋: $behind"
        echo ""
    fi
    
    # 작업 상태
    if [[ -n $(git status --porcelain) ]]; then
        print_warning "미완료 변경사항이 있습니다:"
        git status --short
    else
        print_success "작업 디렉토리가 깨끗합니다."
    fi
    echo ""
    
    # feature 브랜치들
    feature_branches=$(git branch --list "feature/*" "bugfix/*" "docs/*" | sed 's/^..//')
    if [[ -n "$feature_branches" ]]; then
        echo "진행 중인 브랜치들:"
        echo "$feature_branches"
    else
        echo "진행 중인 기능 브랜치가 없습니다."
    fi
}

# main 브랜치와 동기화
gf_sync() {
    local current_branch=$(git branch --show-current)
    
    print_info "🔄 main 브랜치와 동기화 중..."
    
    # 현재 브랜치의 변경사항 확인
    if [[ -n $(git status --porcelain) ]]; then
        print_warning "미완료 변경사항이 있습니다. stash 또는 커밋 후 다시 시도하세요."
        return 1
    fi
    
    # main 브랜치로 전환하고 최신화
    git checkout main || return 1
    git pull origin main || return 1
    
    # 원래 브랜치로 돌아가서 rebase
    if [ "$current_branch" != "main" ]; then
        git checkout "$current_branch" || return 1
        git rebase main || {
            print_error "Rebase 중 충돌이 발생했습니다."
            print_info "충돌을 해결한 후 'git rebase --continue'를 실행하세요."
            return 1
        }
        print_success "브랜치 '$current_branch'를 main과 동기화했습니다."
    else
        print_success "main 브랜치가 최신 상태입니다."
    fi
}

# 브랜치 정리
gf_cleanup() {
    print_info "🧹 병합 완료된 브랜치들 정리 중..."
    
    # main 브랜치로 전환
    git checkout main || return 1
    git pull origin main || return 1
    
    # 로컬 브랜치 중 main에 병합된 것들 삭제
    merged_branches=$(git branch --merged main | grep -v "main" | grep -v "*" | sed 's/^..//')
    if [[ -n "$merged_branches" ]]; then
        echo "삭제할 로컬 브랜치들:"
        echo "$merged_branches"
        echo "$merged_branches" | xargs -n 1 git branch -d
        print_success "로컬 브랜치 정리 완료"
    else
        echo "삭제할 로컬 브랜치가 없습니다."
    fi
    
    # 원격 브랜치 정리
    git remote prune origin
    print_success "원격 브랜치 참조 정리 완료"
}

# 최근 PR 목록
gf_pr_list() {
    if command -v gh &> /dev/null; then
        print_info "📋 최근 Pull Request 목록:"
        gh pr list --limit 10
    else
        print_warning "GitHub CLI(gh)가 설치되어 있지 않습니다."
        print_info "GitHub 웹사이트에서 PR 목록을 확인하세요."
    fi
}

# 도움말
gf_help() {
    echo "🚀 GitHub Flow 헬퍼 명령어들"
    echo "=============================="
    echo ""
    echo "기본 워크플로우:"
    echo "  gf_start <name>        새로운 기능 개발 시작"
    echo "  gf_bugfix <name>       버그 수정 시작"
    echo "  gf_docs <name>         문서 업데이트 시작"
    echo "  gf_pr <title> [body]   Pull Request 생성"
    echo ""
    echo "유틸리티:"
    echo "  gf_status              현재 상태 확인"
    echo "  gf_sync                main 브랜치와 동기화"
    echo "  gf_cleanup             병합된 브랜치 정리"
    echo "  gf_pr_list             최근 PR 목록"
    echo "  gf_help                이 도움말"
    echo ""
    echo "예시 워크플로우:"
    echo "  1. gf_start user-auth                    # 기능 개발 시작"
    echo "  2. # 코드 작성 및 커밋"
    echo "  3. gf_pr 'Add user auth' 'Description'   # PR 생성"
    echo "  4. # 리뷰 후 병합"
    echo "  5. gf_cleanup                            # 브랜치 정리"
}

# 별칭 설정 함수
setup_aliases() {
    echo "# GitHub Flow aliases" >> ~/.bashrc
    echo "alias gfs='gf_start'" >> ~/.bashrc
    echo "alias gfb='gf_bugfix'" >> ~/.bashrc
    echo "alias gfd='gf_docs'" >> ~/.bashrc
    echo "alias gfp='gf_pr'" >> ~/.bashrc
    echo "alias gfst='gf_status'" >> ~/.bashrc
    echo "alias gfsync='gf_sync'" >> ~/.bashrc
    echo "alias gfc='gf_cleanup'" >> ~/.bashrc
    echo "alias gfpl='gf_pr_list'" >> ~/.bashrc
    echo "alias gfh='gf_help'" >> ~/.bashrc
    
    print_success "별칭이 ~/.bashrc에 추가되었습니다."
    print_info "새 터미널을 열거나 'source ~/.bashrc'를 실행하세요."
}

# 초기화 메시지
if [ "${BASH_SOURCE[0]}" != "${0}" ]; then
    # 스크립트가 source로 실행된 경우
    print_success "GitHub Flow 헬퍼 함수들이 로드되었습니다."
    print_info "'gf_help' 명령어로 사용법을 확인하세요."
fi